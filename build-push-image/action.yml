---
# yamllint disable rule:line-length
name: Build Push Image
description: >
  Build the Image and Push to ECR Repository

  required env:
    IMAGE_VERSION
    SECRET__LAZY_API_URL
    SECRET__LAZY_API_KEY
inputs:
  dockerfile_dir_path:
    description: Directory path to the dockerfile
    required: false
    default: .
  ecr_repository:
    description: ECR repository name
    required: true
  aws_region:
    description: >
      Region where the image will be created.
      Defaults to us-east-2.
    default: us-east-2
    required: false
runs:
  using: composite
  steps:
    - name: Create ECR if not exists
      shell: bash
      env:
        LAZY_API_URL: ${{ env.SECRET__LAZY_API_URL }}
        LAZY_API_KEY: ${{ env.SECRET__LAZY_API_KEY }}
        ECR_REPOSITORY: ${{ inputs.ecr_repository }}
        AWS_REGION: ${{ inputs.aws_region }}
      run: ${{ github.action_path }}/ecr_create.sh

    - name: Download .trivyignore
      shell: bash
      run: |
        aws s3 cp s3://trivy-ops/.trivyignore .
        echo "::debug::Checking for .trivyignore specific to $GITHUB_REPOSITORY"
        aws s3 cp "s3://trivy-ops/${GITHUB_REPOSITORY}/.trivyignore" .trivyignore.repository || {
          exit 0
        }
        cat .trivyignore.repository >> .trivyignore
        cat .trivyignore

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::064859874041:role/eks-github-runner
        aws-region: ${{ inputs.aws_region }}

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup Container Build
      shell: pwsh
      id: setup-build
      env:
        ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ inputs.ecr_repository }}
      run: |
        $EOF = [Convert]::ToBase64String((1..10|%{[byte](Get-Random -Max 256)}))
        $BuildArgs = ""
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "build_args<<$EOF"
        Get-ChildItem env:* | Sort-Object name  | ForEach-Object {
            $BuildArgs += "$($_.Name)=$($_.Value)`n"
        }
        $BuildArgs = $BuildArgs.Trim()
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "$BuildArgs"
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "$EOF"

        $Image = "$env:ECR_REGISTRY/$env:ECR_REPOSITORY"
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "ecr-image=$Image"

        ## Used by cake-runner
        Add-Content -Path ${env:GITHUB_ENV} -Encoding utf8 -Value "IMAGE_NAME=${Image}:${env:IMAGE_VERSION}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - uses: docker/metadata-action@v4
      id: metadata
      with:
        images: ${{ steps.setup-build.outputs.ecr-image }}
        tags: |
          type=schedule,enable=true
          type=semver,enable=true,pattern={{version}}
          type=semver,enable=true,pattern={{major}}.{{minor}}
          type=semver,enable=true,pattern={{major}}
          type=raw,enable=true,value=${{ env.IMAGE_VERSION }}
          type=ref,enable=true,event=branch
          type=ref,enable=true,event=pr
          type=sha,enable=true

    - uses: docker/build-push-action@v3
      name: Build Container
      with:
        push: false
        load: true
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        build-args: |
          ${{ steps.setup-build.outputs.build_args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - uses: actions/cache@v3
      with:
        path: .trivy
        key: ${{ runner.os }}-trivy-${{ github.run_id }}
        restore-keys: |
          ${{ runner.os }}-trivy-
    - name: Run Trivy vulnerability image scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        image-ref: ${{ steps.setup-build.outputs.ecr-image }}:${{ env.IMAGE_VERSION }}
        ignore-unfixed: true
        exit-code: '1'
        severity: CRITICAL
        github-pat: ${{ env.SECRET__GITHUB_TOKEN }}
        timeout: 10m
        cache-dir: .trivy
    - name: Correct Trivy cache permissions
      shell: bash
      run: sudo chown -R $USER:$GROUP .trivy

    - uses: docker/build-push-action@v3
      name: Push Container
      with:
        push: true
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        build-args: |
          ${{ steps.setup-build.outputs.build_args }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
