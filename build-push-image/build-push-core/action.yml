---
# yamllint disable rule:line-length
name: Build Push Image
description: >
  Build the Image and Push to ECR Repository

  required env:
    IMAGE_VERSION
inputs:
  dockerfile_dir_path:
    description: Directory Path to the dockerfile
    required: false
    default: .
  ecr_registry:
    description: ECR Registry ID
    required: true
  ecr_repository:
    description: ECR Repository Name
    required: true
  ignore_trivy:
    description: Ignore Trivy Scanning
    default: 'false'
    required: false
runs:
  using: composite
  steps:
    - name: Setup Container Build
      shell: pwsh
      id: setup-build
      env:
        ECR_REGISTRY: ${{ inputs.ecr_registry }}
        ECR_REPOSITORY: ${{ inputs.ecr_repository }}
      run: |
        ## Create BuildArgs for docker build from environment variables
        $EOF = [Convert]::ToBase64String((1..10|%{[byte](Get-Random -Max 256)}))
        $BuildArgs = ""
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "build_args<<$EOF"
        Get-ChildItem env:* | Sort-Object name  | ForEach-Object {
            $BuildArgs += "$($_.Name)=$($_.Value)`n"
        }
        $BuildArgs = $BuildArgs.Trim()
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "$BuildArgs"
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "$EOF"

        $Image = "$env:ECR_REGISTRY/$env:ECR_REPOSITORY"
        Add-Content -Path ${env:GITHUB_OUTPUT} -Encoding utf8 -Value "ecr-image=$Image"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - uses: docker/metadata-action@v5
      id: metadata
      with:
        images: ${{ steps.setup-build.outputs.ecr-image }}
        tags: |
          type=schedule,enable=true
          type=semver,enable=true,pattern={{version}}
          type=semver,enable=true,pattern={{major}}.{{minor}}
          type=semver,enable=true,pattern={{major}}
          type=raw,enable=true,value=${{ env.IMAGE_VERSION }}
          type=ref,enable=true,event=branch
          type=ref,enable=true,event=pr
          type=sha,enable=true

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ env.GITHUB_TOKEN }}

    - uses: docker/build-push-action@v6
      name: Build Container Image
      with:
        context: ${{ inputs.dockerfile_dir_path }}
        push: false
        load: true
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        build-args: |
          ${{ steps.setup-build.outputs.build_args }}
        cache-from: ${{ inputs.ignore_trivy != 'true' && 'type=gha' || '' }}
        cache-to: ${{ inputs.ignore_trivy != 'true' && 'type=gha,mode=max' || '' }}

    - uses: actions/cache@v4
      name: Cache Trivy Database
      if: ${{ inputs.ignore_trivy != 'true' }}
      with:
        path: .trivy
        key: ${{ runner.os }}-trivy
        restore-keys: |
          ${{ runner.os }}-trivy

    - name: Configure AWS credentials for ECR
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: arn:aws:iam::064859874041:role/eks-github-runner
        aws-region: us-east-1

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Run Trivy vulnerability image scanner
      uses: aquasecurity/trivy-action@master
      id: trivy
      if: ${{ inputs.ignore_trivy != 'true' }}
      with:
        scan-type: image
        image-ref: ${{ steps.setup-build.outputs.ecr-image }}:${{ env.IMAGE_VERSION }}
        ignore-unfixed: true
        exit-code: '1'
        severity: CRITICAL
        github-pat: ${{ env.GITHUB_TOKEN }}
        timeout: 10m
        cache-dir: .trivy
      env:
        TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2

    - name: Set Summary
      shell: bash
      if: ${{ inputs.ignore_trivy != 'true' && failure() && steps.trivy.conclusion == 'failure' }}
      run: |
        cat <<EOT >> $GITHUB_STEP_SUMMARY
          ## Vulnerability Scan Failed
          Check the results to see if there are any critical errors and fix them.
          If it is something else, check with #cloudops.
        EOT

    - name: Correct Trivy cache permissions
      shell: bash
      if: ${{ inputs.ignore_trivy != 'true' }}
      run: sudo chown -R $USER:$GROUP .trivy

    - name: Push Container Image
      shell: bash
      run: |
        docker image push -a ${{ steps.setup-build.outputs.ecr-image }}

    - name: Set Summary
      shell: bash
      run: |
        echo "## Image Created" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.setup-build.outputs.ecr-image }}:${{ env.IMAGE_VERSION }}" >> $GITHUB_STEP_SUMMARY
